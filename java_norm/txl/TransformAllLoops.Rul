% Paul deGrandis, Drexel University, June 2007
% [SERG Author identification research]
% This is used to Transform and normalize all looping constructs in
%    Java to a common looping structure.
% 
% --------Adapted from the JavaToC# code.  See credits below--------
% Rihab Eltayeb, Sudan University, August 2005
% [part of master thesis project]
% % *****
% % common to Statements and control structures 
%

% ----------------------------------------------------------------------------
% *********	Block STATEMENTS 	*********
% ----------------------------------------------------------------------------
% [0]find a block as the body of a method or constructor or a statementt
function translateBlock
	replace*[block]
	   '{                                        
        	DeclOrStmt[repeat declaration_or_statement]     
    	   '}
	by
	   '{
	   	DeclOrStmt [translateStatementInBlock]
				   %[translateVarDeclaration]
	   	           %[translateClassInBlock]     
           	       '}
end function
% *************************************************************************


% *************************************************************************
% [3]STATEMENTS DECLARATIONS-----------------------------------------------
function translateStatementInBlock
	replace*[repeat declaration_or_statement]
		Stmnt[statement]
		Remaining[repeat declaration_or_statement]
	by
		Stmnt[translateStatement]
		Remaining[translateStatementInBlock]
end function
% [3-1]one statement at a time--------------------------------------------
function translateStatement
	replace [statement]
		OneStmnt[statement]
	by
		OneStmnt[changeExpressionStmt]
		        [changeWhile]
		        [changeDoWhile]
		        [changeFor]
		        [changeBreak]
		        [changeContinue]
				%[changeIf]
		        %[changeSwitch]
		        %[changeReturn]
		        %[changeThrow]
		        %[changeSynchronized]
		        %[changeTry]
		       
end function	       
% [3-2]Expression Statement-----------------------------------------------
function changeExpressionStmt
	replace[statement]
		Expression[expression];
	by
		Expression[changeExpression][changeCSStatement];
end function
function changeExpression
	replace*[expression]
		Expression[expression]
	by
		Expression[$ '>>> '>>]
end function
% *************************************************************************


% *************************************************************************
% [3-6]While Statement--------------------------------------------------------
%function changeWhile
%	replace*[statement]
%		'while '( WhileExp[expression] ') 
%        		Stmts[statement]   
%	by
%		'while '( WhileExp[changeExpression]') 
%        		Stmts[translateStatement][translateBlock]
%end function
%
% [3-7]While Statement--------------------------------------------------------
%function changeDoWhile
%	replace*[statement]
%		'do
%			Stmts[statement]
%		'while '( DoWhileExp[expression] ');    
%	by
%		'do
%			Stmts[translateStatement][translateBlock]
%		'while '( DoWhileExp[changeExpression]'); 	
%end function
% [3-8]For Statement--------------------------------------------------------
function changeFor
	replace*[statement]
		'for '( InitExp[for_init] ForExp[for_expression]UpdateExp [for_update] ')
        		Stmts[statement]    
	by
		InitExp[checkLocalVars][changeExpression]
		'while '( ForExp[changeExpression] ')
			    Stmts[translateStatement][translateBlock]
				UpdateExp[changeExpression]

%		'for '( InitExp[checkLocalVars][changeExpression] ForExp[changeExpression]UpdateExp [changeExpression] ')
%        		Stmts[translateStatement][translateBlock]  	
end function
% [3-9]Break Statement--------------------------------------------------------
function changeBreak
	replace*[statement]
		BreakStmt[break_statement]
	deconstruct BreakStmt
		'break LabelName[reference]';
	by
		BreakStmt[$ 'break 'goto]%'goto LabelName ';
end function
% [3-10]Continue Statement--------------------------------------------------------
function changeContinue
	replace*[statement]
		ContinueStmt[continue_statement]
	deconstruct ContinueStmt
		'continue LabelName[reference]';
	by
		ContinueStmt[$ 'continue 'goto]%'goto LabelName ';
end function      


